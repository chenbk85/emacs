;; Object nxml-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "nxml-mode/"
  :tables (list 
   (semanticdb-table "Makefile"
    :major-mode 'makefile-mode
    :tags '(("EXTRA" variable (:default-value ("README" "NEWS" "VERSION" "TODO" "COPYING" "Makefile" "rng-auto.el" "nxml-mode.xml" "nxml-mode.rnc" "nxml-mode.texi" "nxml-mode.info" "dir" "test.valid.xml" "test.invalid.xml")) nil [1 164]) ("SRC" variable (:default-value ("nxml-rap.el" "nxml-outln.el" "nxml-mode.el" "nxml-parse.el" "nxml-enc.el" "nxml-uchnm.el" "nxml-glyph.el" "nxml-maint.el" "nxml-util.el" "nxml-ns.el" "rng-dt.el" "rng-valid.el" "rng-pttrn.el" "rng-xsd.el" "rng-cmpct.el" "rng-match.el" "rng-nxml.el" "rng-util.el" "rng-loc.el" "rng-uri.el" "rng-parse.el" "rng-maint.el" "xsd-regexp.el" "xmltok.el")) nil [165 485]) ("ELC" variable (:default-value ("nxml-rap.elc" "nxml-outln.elc" "nxml-mode.elc" "nxml-parse.elc" "nxml-enc.elc" "nxml-uchnm.elc" "nxml-glyph.elc" "nxml-maint.elc" "nxml-util.elc" "nxml-ns.elc" "rng-dt.elc" "rng-valid.elc" "rng-pttrn.elc" "rng-xsd.elc" "rng-cmpct.elc" "rng-match.elc" "rng-nxml.elc" "rng-util.elc" "rng-loc.elc" "rng-uri.elc" "rng-parse.elc" "rng-maint.elc" "xsd-regexp.elc" "xmltok.elc")) nil [486 830]) ("FILESTOCLEAN" variable (:default-value ("stamp-byte-compile" "$(ELC)" "VERSION" "TAGS" "nxml-mode.texi" "nxml-mode.info" "dir")) nil [831 921]) ("EMACS" variable (:default-value ("emacs")) nil [922 934]) ("ETAGS" variable (:default-value ("etags")) nil [934 946]) ("MAKEINFO" variable (:default-value ("makeinfo")) nil [946 964]) ("INSTALL-INFO" variable (:default-value ("install-info")) nil [964 990]) ("PACKAGE" variable (:default-value ("nxml-mode")) nil [990 1008]) ("stamp-byte-compile" function (:arguments ("$(SRC)")) nil [1009 1121]) ("all" function (:arguments ("stamp-byte-compile" "nxml-mode.info")) nil [1121 1161]) ("dir" function (:arguments ("nxml-mode.info")) nil [1161 1215]) ("info" function (:arguments ("nxml-mode.info")) nil [1215 1237]) ("nxml-mode.info" function (:arguments ("nxml-mode.texi")) nil [1237 1285]) ("nxml-mode.texi" function (:arguments ("nxml-mode.xml")) nil [1285 1369]) ("VERSION" function (:arguments ("stamp-byte-compile" "rng-auto.el")) nil [1369 1463]) ("TAGS" function (:arguments ("$(SRC)")) nil [1463 1494]) ("dist" function (:arguments ("stamp-byte-compile" "$(EXTRA)")) nil [1494 2150]) ("clean" function nil nil [2150 2182]))
    :file "Makefile"
    :pointmax 2205
    )
   (semanticdb-table "rng-auto.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("setq" code nil nil [884 914]) ("unless" code nil nil [916 1052]) ("when" code nil nil [1054 1131]) ("when" code nil nil [1209 1402]) ("rng-add-info-dir" function (:arguments ("dir")) nil [1404 2092]) ("let*" code nil nil [2094 2526]) ("setq" code nil nil [2622 2828]) ("add-hook" code nil nil [2830 2876]) ("add-hook" code nil nil [2877 2939]) ("setq" code nil nil [2941 3002]) ("put" code nil nil [3158 3206]) ("nxml-enc" include nil nil [3208 3227]) ("nxml-start-auto-coding" code nil nil [3275 3299]) ("nxml-glyph-display-string" function (:prototype-flag t) nil [3445 3699]) ("nxml-mode" function (:prototype-flag t :user-visible-flag t) nil [3825 6174]) ("nxml-enable-unicode-char-name-sets" function (:prototype-flag t :user-visible-flag t) nil [6336 6577]) ("rng-c-load-schema" function (:prototype-flag t) nil [6719 6853]) ("rng-update-autoloads" function (:prototype-flag t :user-visible-flag t) nil [7056 7154]) ("rng-byte-compile-load" function (:prototype-flag t :user-visible-flag t) nil [7156 7293]) ("rng-format-manual" function (:prototype-flag t :user-visible-flag t) nil [7295 7389]) ("rng-write-version" function (:prototype-flag t) nil [7391 7451]) ("rng-nxml-mode-init" function (:prototype-flag t :user-visible-flag t) nil [7590 7833]) ("rng-validate-mode" function (:prototype-flag t :user-visible-flag t) nil [7974 9236]) ("put" code nil nil [9370 9475]) ("rng-xsd-compile" function (:prototype-flag t) nil [9477 10552]) ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [10704 11345]))
    :file "rng-auto.el"
    :pointmax 11382
    :unmatched-syntax 'nil
    )
   (semanticdb-table "rng-maint.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "rng-maint.el"
    )
   (semanticdb-table "xmltok.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("xmltok-type" variable nil nil [4274 4298]) ("xmltok-start" variable nil nil [4299 4324]) ("xmltok-name-colon" variable nil nil [4325 4355]) ("xmltok-name-end" variable nil nil [4356 4384]) ("xmltok-replacement" variable nil nil [4385 4487]) ("xmltok-attributes" variable nil nil [4489 4899]) ("xmltok-namespace-attributes" variable nil nil [4901 5054]) ("xmltok-dtd" variable nil nil [5056 6301]) ("xmltok-dependent-regions" variable nil nil [6303 7814]) ("xmltok-errors" variable nil nil [7816 8220]) ("xmltok-save" function (:arguments ("&rest" "body")) nil [8222 8459]) ("put" code nil nil [8461 8503]) ("def-edebug-spec" code nil nil [8504 8535]) ("xmltok-attribute-name-start" function (:arguments ("att")) nil [8537 8596]) ("xmltok-attribute-name-colon" function (:arguments ("att")) nil [8598 8657]) ("xmltok-attribute-name-end" function (:arguments ("att")) nil [8659 8716]) ("xmltok-attribute-value-start" function (:arguments ("att")) nil [8718 8778]) ("xmltok-attribute-value-end" function (:arguments ("att")) nil [8780 8838]) ("xmltok-attribute-raw-normalized-value" function (:arguments ("att")) nil [8840 9160]) ("xmltok-attribute-refs" function (:arguments ("att")) nil [9162 9494]) ("xmltok-attribute-prefix" function (:arguments ("att")) nil [9496 9682]) ("xmltok-attribute-local-name" function (:arguments ("att")) nil [9684 9925]) ("xmltok-attribute-value" function (:arguments ("att")) nil [9927 10181]) ("xmltok-start-tag-prefix" function nil nil [10183 10330]) ("xmltok-start-tag-local-name" function nil nil [10332 10475]) ("xmltok-end-tag-prefix" function nil nil [10477 10623]) ("xmltok-end-tag-local-name" function nil nil [10625 10801]) ("xmltok-start-tag-qname" function nil nil [10803 10906]) ("xmltok-end-tag-qname" function nil nil [10908 11009]) ("xmltok-make-attribute" function (:arguments ("name-begin" "name-colon" "name-end" "&optional" "value-begin" "value-end" "raw-normalized-value")) nil [11011 11463]) ("xmltok-error-message" function (:arguments ("err")) nil [11465 11517]) ("xmltok-error-start" function (:arguments ("err")) nil [11519 11569]) ("xmltok-error-end" function (:arguments ("err")) nil [11571 11619]) ("xmltok-make-error" function (:arguments ("message" "start" "end")) nil [11621 11698]) ("xmltok-add-error" function (:arguments ("message" "&optional" "start" "end")) nil [11700 11885]) ("xmltok-add-dependent" function (:arguments ("fun" "&optional" "start" "end" "&rest" "args")) nil [11887 12116]) ("xmltok-forward" function nil nil [12118 13263]) ("xmltok-forward-special" function (:arguments ("bound")) nil [13265 13795]) ("xmltok-r" function (:arguments ("str")) nil [14044 14085]) ("xmltok+" function (:arguments ("&rest" "args")) nil [14149 14491]) ("xmltok-g" function (:arguments ("name" "&rest" "r")) nil [14627 14880]) ("xmltok-p" function (:arguments ("&rest" "r")) nil [14884 14972]) ("xmltok-get-index" function (:arguments ("elem" "list")) nil [15031 15360]) ("xmltok-defregexp" function (:arguments ("sym" "r")) nil [15715 16404]) ("let*" code nil nil [16431 22455]) ("xmltok-ncname-regexp" variable (:constant-flag t :default-value (xmltok-ncname regexp)) nil [22458 22512]) ("xmltok-scan-after-lt" function nil nil [22514 26439]) ("xmltok-scan-after-processing-instruction-open" function nil nil [26604 27798]) ("xmltok-scan-after-comment-open" function nil nil [27802 28627]) ("xmltok-scan-attributes" function nil nil [28629 31209]) ("xmltok-add-attribute" function nil nil [31211 32137]) ("xmltok-normalize-attribute" function (:arguments ("att")) nil [32141 33413]) ("xmltok-scan-after-amp" function (:arguments ("entity-handler")) nil [33415 34398]) ("xmltok-entity-error-messages" variable (:constant-flag t :default-value (quote ((unparsed . "Referenced entity is unparsed") (not-well-formed . "Referenced entity is not well-formed") (external nil . "Referenced entity is external") (element nil . "Referenced entity contains <")))) nil [34400 34656]) ("xmltok-handle-entity" function (:arguments ("start" "end" "&optional" "attributep")) nil [34658 35434]) ("xmltok-scan-char-ref" function (:arguments ("start" "end" "base")) nil [35436 35807]) ("xmltok-char-number" function (:arguments ("start" "end")) nil [35809 36092]) ("xmltok-unclosed-reparse-p" function (:arguments ("change-start" "change-end" "pre-change-length" "start" "end" "delimiter")) nil [36094 36378]) ("xmltok-semi-closed-reparse-p" function (:arguments ("change-start" "change-end" "pre-change-length" "start" "end" "delimiter" "delimiter-length")) nil [36434 36774]) ("xmltok-valid-char-p" function (:arguments ("n")) nil [36776 37020]) ("xmltok-unicode-to-char" function (:arguments ("n")) nil [37022 37181]) ("xmltok-contains-doctype" variable nil nil [37203 37239]) ("xmltok-doctype-external-subset-flag" variable nil nil [37240 37288]) ("xmltok-internal-subset-start" variable nil nil [37289 37330]) ("xmltok-had-param-entity-ref" variable nil nil [37331 37371]) ("xmltok-prolog-regions" variable nil nil [37372 37406]) ("xmltok-standalone" variable nil nil [37407 37512]) ("xmltok-markup-declaration-doctype-flag" variable nil nil [37513 37564]) ("xmltok-predefined-entity-alist" variable (:constant-flag t :default-value (quote (("lt" "<" . "<") ("gt" ">" . ">") ("amp" "&" . "&") ("apos" "'" . "'") ("quot" "\"" . "\"")))) nil [37566 37720]) ("xmltok-forward-prolog" function nil nil [37722 39184]) ("xmltok-bad-xml-decl-regexp" variable (:constant-flag t :default-value "[ 	
]*<\\?xml\\(?:[ 	
]\\|\\?>\\)") nil [39186 39269]) ("xmltok-get-declared-encoding-position" function (:arguments ("&optional" "limit")) nil [39286 40364]) ("xmltok-scan-xml-declaration" function nil nil [40368 42116]) ("xmltok-markup-declaration-alist" variable (:constant-flag t :default-value (quote (("ELEMENT" . xmltok-parse-element-declaration) ("ATTLIST" . xmltok-parse-attlist-declaration) ("ENTITY" . xmltok-parse-entity-declaration) ("NOTATION" . xmltok-parse-notation-declaration)))) nil [42118 42365]) ("xmltok-parse-prolog-item" function nil nil [42367 44313]) ("xmltok-parse-doctype" function nil nil [44315 45143]) ("xmltok-parse-attlist-declaration" function nil nil [45145 45934]) ("xmltok-parse-nmtoken-group" function nil nil [45941 46121]) ("xmltok-parse-element-declaration" function nil nil [46123 46721]) ("xmltok-parse-model-group" function nil nil [46723 47218]) ("xmltok-parse-model-group-member" function nil nil [47227 47432]) ("xmltok-parse-entity-declaration" function nil nil [47438 48266]) ("xmltok-define-entity" function (:arguments ("name" "value")) nil [48268 48481]) ("xmltok-parse-entity-value" function nil nil [48485 49623]) ("xmltok-parse-notation-declaration" function nil nil [49632 50043]) ("xmltok-parse-external-id" function nil nil [50045 50324]) ("xmltok-require-next-token" function (:arguments ("&rest" "types")) nil [50326 50440]) ("xmltok-require-token" function (:arguments ("&rest" "types")) nil [50442 51069]) ("xmltok-current-token-string" function nil nil [51071 51165]) ("put" code nil nil [51167 51286]) ("put" code nil nil [51288 51394]) ("xmltok-markup-declaration-parse-error" function nil nil [51396 51498]) ("xmltok-skip-markup-declaration" function nil nil [51500 52073]) ("xmltok-prolog-region-type" function (:arguments ("required")) nil [52075 52355]) ("xmltok-next-prolog-token" function nil nil [52394 56046]) ("xmltok-scan-prolog-literal" function nil nil [56048 57065]) ("xmltok-scan-prolog-after-processing-instruction-open" function nil nil [57067 58870]) ("xmltok-parse-entities" function nil nil [58872 59184]) ("xmltok-parse-entity" function (:arguments ("name-def")) nil [59188 59760]) ("xmltok-parse-entity-replacement" function nil nil [59762 61575]) ("xmltok-handle-nested-entity" function (:arguments ("start" "end")) nil [61577 62003]) ("xmltok-append-entity-def" function (:arguments ("d1" "d2")) nil [62009 62384]) ("xmltok-add-prolog-region" function (:arguments ("type" "start" "end")) nil [62386 62527]) ("xmltok-merge-attributes" function nil nil [62529 63488]) ("xmltok-forward-test" function nil nil [63503 63646]) ("xmltok-next-prolog-token-test" function nil nil [63648 63862]) ("xmltok" package nil nil [63862 63862]))
    :file "xmltok.el"
    :pointmax 63862
    :unmatched-syntax 'nil
    )
   (semanticdb-table "xsd-regexp.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "xsd-regexp.el"
    )
   (semanticdb-table "nxml-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("when" code nil nil [1220 1297]) ("xmltok" include nil nil [1299 1316]) ("nxml-enc" include nil nil [1317 1336]) ("nxml-glyph" include nil nil [1337 1358]) ("nxml-util" include nil nil [1359 1379]) ("nxml-rap" include nil nil [1380 1399]) ("nxml-outln" include nil nil [1400 1421]) ("defgroup" code nil nil [1442 1519]) ("defgroup" code nil nil [1521 1652]) ("nxml-syntax-highlight-flag" variable (:user-visible-flag t :default-value t) nil [1654 1791]) ("nxml-char-ref-display-glyph-flag" variable (:user-visible-flag t :default-value t) nil [1793 2080]) ("nxml-mode-hook" variable nil nil [2082 2178]) ("nxml-sexp-element-flag" variable (:user-visible-flag t) nil [2180 2324]) ("nxml-slash-auto-complete-flag" variable (:user-visible-flag t) nil [2326 2513]) ("nxml-child-indent" variable (:user-visible-flag t :default-value 2) nil [2515 2768]) ("nxml-attribute-indent" variable (:user-visible-flag t :default-value 4) nil [2770 3095]) ("nxml-fontify-chunk-size" variable (:default-value 500) nil [3097 3133]) ("nxml-bind-meta-tab-to-complete-flag" variable (:user-visible-flag t :default-value (not window-system)) nil [3135 3744]) ("nxml-prefer-utf-16-to-utf-8-flag" variable (:user-visible-flag t) nil [3746 4048]) ("nxml-prefer-utf-16-little-to-big-endian-flag" variable (:user-visible-flag t :default-value (eq system-type (quote windows-nt))) nil [4050 4456]) ("nxml-default-buffer-file-coding-system" variable (:user-visible-flag t) nil [4458 4797]) ("nxml-auto-insert-xml-declaration-flag" variable (:user-visible-flag t) nil [4799 5027]) ("nxml-light-blue-color" variable (:constant-flag t :default-value "#9292C9") nil [5592 5634]) ("nxml-dark-blue-color" variable (:constant-flag t :default-value "#3A3A7B") nil [5645 5686]) ("nxml-green-color" variable (:constant-flag t :default-value "#257A25") nil [5697 5734]) ("nxml-sky-blue-color" variable (:constant-flag t :default-value "#ACACFC") nil [5922 5962]) ("nxml-dark-green-color" variable (:constant-flag t :default-value "#00AD00") nil [5973 6015]) ("nxml-light-green-color" variable (:constant-flag t :default-value "#70F170") nil [6026 6069]) ("nxml-delimited-data-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-dark-blue-color))) (((class color) (background dark)) (:foreground (\, nxml-light-green-color)))))) nil [6081 6475]) ("nxml-name-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-green-color))) (((class color) (background dark)) (:foreground (\, nxml-sky-blue-color)))))) nil [6477 6910]) ("nxml-ref-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-light-blue-color))) (((class color) (background dark)) (:foreground (\, nxml-dark-green-color)))))) nil [6912 7253]) ("nxml-delimiter-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-light-blue-color))) (((class color) (background dark)) (:foreground (\, nxml-dark-green-color))) (t (:bold t))))) nil [7255 7599]) ("nxml-text-face" variable nil nil [7601 7698]) ("nxml-comment-content-face" variable (:default-value (quote ((t (:italic t))))) nil [7700 7842]) ("nxml-comment-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [7844 8019]) ("nxml-processing-instruction-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [8021 8223]) ("nxml-processing-instruction-target-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [8225 8400]) ("nxml-processing-instruction-content-face" variable (:default-value (quote ((t (:inherit nxml-delimited-data-face))))) nil [8402 8589]) ("nxml-cdata-section-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [8591 8781]) ("nxml-cdata-section-CDATA-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [8783 8946]) ("nxml-cdata-section-content-face" variable (:default-value (quote ((t (:inherit nxml-text-face))))) nil [8948 9107]) ("nxml-char-ref-number-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9109 9307]) ("nxml-char-ref-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9309 9487]) ("nxml-entity-ref-name-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9489 9656]) ("nxml-entity-ref-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9658 9834]) ("nxml-tag-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [9836 10040]) ("nxml-tag-slash-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10042 10212]) ("nxml-element-prefix-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10214 10359]) ("nxml-element-colon-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10361 10509]) ("nxml-element-local-name-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10511 10664]) ("nxml-attribute-prefix-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10666 10815]) ("nxml-attribute-colon-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10817 10969]) ("nxml-attribute-local-name-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10973 11130]) ("nxml-namespace-attribute-xmlns-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [11132 11297]) ("nxml-namespace-attribute-colon-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [11299 11466]) ("nxml-namespace-attribute-prefix-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [11468 11646]) ("nxml-attribute-value-face" variable (:default-value (quote ((t (:inherit nxml-delimited-data-face))))) nil [11648 11805]) ("nxml-attribute-value-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [11807 11980]) ("nxml-namespace-attribute-value-face" variable (:default-value (quote ((t (:inherit nxml-attribute-value-face))))) nil [11982 12160]) ("nxml-namespace-attribute-value-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-attribute-value-delimiter-face))))) nil [12162 12371]) ("nxml-prolog-literal-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [12373 12551]) ("nxml-prolog-literal-content-face" variable (:default-value (quote ((t (:inherit nxml-delimited-data-face))))) nil [12553 12731]) ("nxml-prolog-keyword-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [12733 12878]) ("nxml-markup-declaration-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [12880 13102]) ("nxml-hash-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [13104 13246]) ("nxml-glyph-face" variable (:default-value (quote ((((type x)) (:family "misc-fixed" :background "light grey" :foreground "black" :weight normal :slant normal)) (t (:background "light grey" :foreground "black" :weight normal :slant normal))))) nil [13248 13659]) ("nxml-version" variable (:user-visible-flag t) nil [13722 13797]) ("nxml-prolog-regions" variable nil nil [13799 13945]) ("make-variable-buffer-local" code nil nil [13946 13995]) ("nxml-last-fontify-end" variable nil nil [13997 14132]) ("make-variable-buffer-local" code nil nil [14133 14184]) ("nxml-degraded" variable nil nil [14186 14376]) ("make-variable-buffer-local" code nil nil [14377 14420]) ("nxml-completion-hook" variable nil nil [14422 14520]) ("nxml-in-mixed-content-hook" variable nil nil [14522 14790]) ("nxml-mixed-scan-distance" variable (:default-value 4000) nil [14792 14903]) ("nxml-end-tag-indent-scan-distance" variable (:default-value 4000) nil [14905 15026]) ("nxml-char-ref-extra-display" variable (:default-value t) nil [15028 15344]) ("make-variable-buffer-local" code nil nil [15345 15402]) ("nxml-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\225" (quote nxml-backward-up-element)) (define-key map "\204" (quote nxml-down-element)) (define-key map "\216" (quote nxml-forward-element)) (define-key map "\220" (quote nxml-backward-element)) (define-key map "\373" (quote nxml-backward-paragraph)) (define-key map "\375" (quote nxml-forward-paragraph)) (define-key map "\350" (quote nxml-mark-paragraph)) (define-key map "" (quote nxml-finish-element)) (define-key map "" (quote nxml-split-element)) (define-key map "" (quote nxml-balanced-close-start-tag-block)) (define-key map "	" (quote nxml-balanced-close-start-tag-inline)) (define-key map "" (quote nxml-insert-xml-declaration)) (define-key map "" (quote nxml-dynamic-markup-word)) (define-key map "" (quote nxml-insert-named-char)) (define-key map "" nxml-outline-prefix-map) (define-key map [S-mouse-2] (quote nxml-mouse-hide-direct-text-content)) (define-key map "/" (quote nxml-electric-slash)) (define-key map [C-return] (quote nxml-complete)) (when nxml-bind-meta-tab-to-complete-flag (define-key map "\211" (quote nxml-complete))) map)) nil [15404 16621]) ("nxml-set-face" function (:arguments ("start" "end" "face")) nil [16623 16743]) ("nxml-clear-face" function (:arguments ("start" "end")) nil [16745 16877]) ("nxml-set-fontified" function (:arguments ("start" "end")) nil [16879 16965]) ("nxml-clear-fontified" function (:arguments ("start" "end")) nil [16967 17064]) ("nxml-mode" function (:user-visible-flag t) nil [17081 22079]) ("nxml-degrade" function (:arguments ("context" "err")) nil [22081 22561]) ("nxml-after-change" function (:arguments ("start" "end" "pre-change-length")) nil [22586 23098]) ("nxml-after-change1" function (:arguments ("start" "end" "pre-change-length")) nil [23100 25025]) ("nxml-insert-xml-declaration" function (:user-visible-flag t) nil [25044 25654]) ("nxml-prepare-to-save" function nil nil [25656 26141]) ("nxml-select-coding-system" function nil nil [26143 28406]) ("nxml-unsuitable-coding-system-message" function (:arguments ("coding-system" "&optional" "enc-name")) nil [28408 28706]) ("nxml-utf-16-coding-systems" variable (:constant-flag t :default-value (and (coding-system-p (quote utf-16-be)) (coding-system-p (quote utf-16-le)) (quote (utf-16-be utf-16-le)))) nil [28708 28846]) ("nxml-utf-coding-systems" variable (:constant-flag t :default-value (cons (quote utf-8) nxml-utf-16-coding-systems)) nil [28848 28923]) ("nxml-coding-system-unicode-p" function (:arguments ("coding-system")) nil [28925 29074]) ("nxml-coding-system-name" function (:arguments ("coding-system")) nil [29076 29363]) ("nxml-fix-encoding-declaration" function (:arguments ("enc-pos" "coding-system")) nil [29365 29968]) ("nxml-choose-suitable-coding-system" function (:arguments ("suitable-coding-systems")) nil [29970 30487]) ("nxml-choose-utf-coding-system" function nil nil [30489 30969]) ("nxml-choose-utf-16-coding-system" function nil nil [30971 31394]) ("nxml-coding-system-member" function (:arguments ("coding-system" "coding-systems")) nil [31396 31676]) ("nxml-fontify" function (:arguments ("start")) nil [31697 32135]) ("nxml-fontify1" function (:arguments ("start")) nil [32137 32714]) ("nxml-fontify-buffer" function nil nil [32716 33002]) ("nxml-fontify-prolog" function nil nil [33004 33462]) ("nxml-do-fontify" function (:arguments ("&optional" "bound")) nil [33464 33817]) ("put" code nil nil [33941 34106]) ("put" code nil nil [34108 34241]) ("put" code nil nil [34243 34421]) ("put" code nil nil [34423 34569]) ("put" code nil nil [34571 34775]) ("put" code nil nil [34777 34950]) ("put" code nil nil [34952 35137]) ("put" code nil nil [35139 35314]) ("put" code nil nil [35316 35482]) ("put" code nil nil [35484 35693]) ("put" code nil nil [35695 35999]) ("put" code nil nil [36001 36069]) ("put" code nil nil [36138 36355]) ("put" code nil nil [36357 36467]) ("put" code nil nil [36469 36675]) ("put" code nil nil [36677 36849]) ("put" code nil nil [36851 37027]) ("put" code nil nil [37029 37216]) ("put" code nil nil [37218 37299]) ("put" code nil nil [37301 37448]) ("put" code nil nil [37450 37562]) ("put" code nil nil [37564 37672]) ("put" code nil nil [37674 37836]) ("put" code nil nil [37838 37949]) ("nxml-apply-fontify-rule" function (:arguments ("&optional" "type" "start" "end")) nil [37951 39541]) ("nxml-fontify-attributes" function nil nil [39543 39909]) ("nxml-fontify-attribute" function (:arguments ("att" "&optional" "namespace-declaration")) nil [39911 41383]) ("nxml-fontify-qname" function (:arguments ("start" "colon" "end" "prefix-face" "colon-face" "local-name-face" "&optional" "unprefixed-face")) nil [41385 41773]) ("nxml-electric-slash" function (:user-visible-flag t :arguments ("arg")) nil [41788 43295]) ("nxml-balanced-close-start-tag-block" function (:user-visible-flag t) nil [43297 43707]) ("nxml-balanced-close-start-tag-inline" function (:user-visible-flag t) nil [43709 43982]) ("nxml-balanced-close-start-tag" function (:arguments ("block-or-inline")) nil [43984 44780]) ("nxml-finish-element" function (:user-visible-flag t) nil [44783 44919]) ("nxml-last-split-position" variable nil nil [44921 45025]) ("nxml-split-element" function (:user-visible-flag t) nil [45027 45532]) ("nxml-finish-element-1" function (:user-visible-flag t :arguments ("startp")) nil [45534 47483]) ("nxml-indent-line" function nil nil [47502 47880]) ("nxml-compute-indent" function nil nil [47882 48065]) ("nxml-compute-indent-from-matching-start-tag" function nil nil [48067 49203]) ("nxml-compute-indent-from-previous-line" function nil nil [49205 51089]) ("nxml-merge-indent-context-type" function (:arguments ("context")) nil [51091 51784]) ("nxml-compute-indent-in-token" function (:arguments ("pos")) nil [51786 52650]) ("nxml-compute-indent-in-start-tag" function (:arguments ("pos")) nil [52652 53835]) ("nxml-attribute-value-boundary" function (:arguments ("pos")) nil [53837 54643]) ("nxml-compute-indent-in-delimited-token" function (:arguments ("pos" "open-delim" "close-delim")) nil [54651 55487]) ("nxml-complete" function (:user-visible-flag t) nil [55505 56263]) ("nxml-forward-balanced-item" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [56279 57493]) ("nxml-forward-single-balanced-item" function nil nil [57495 58210]) ("nxml-backward-single-balanced-item" function nil nil [58212 58923]) ("nxml-scan-forward-within" function (:arguments ("end")) nil [58925 59915]) ("nxml-scan-backward-within" function (:arguments ("end")) nil [59917 60891]) ("nxml-scan-forward-in-attribute-value" function (:arguments ("att")) nil [60893 61602]) ("nxml-scan-backward-in-attribute-value" function (:arguments ("att")) nil [61604 62342]) ("nxml-find-following-attribute" function nil nil [62344 63090]) ("nxml-find-preceding-attribute" function nil nil [63092 63837]) ("nxml-up-element" function (:arguments ("&optional" "arg")) nil [63839 64652]) ("nxml-backward-up-element" function (:arguments ("&optional" "arg")) nil [64654 65490]) ("nxml-down-element" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [65492 66177]) ("nxml-backward-down-element" function (:arguments ("&optional" "arg")) nil [66179 66907]) ("nxml-forward-element" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [66909 67445]) ("nxml-backward-element" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [67447 68050]) ("nxml-mark-token-after" function nil nil [68052 68202]) ("nxml-mark-paragraph" function (:user-visible-flag t) nil [68220 68472]) ("nxml-forward-paragraph" function (:arguments ("&optional" "arg")) nil [68474 68734]) ("nxml-backward-paragraph" function (:arguments ("&optional" "arg")) nil [68736 69058]) ("nxml-forward-single-paragraph" function nil nil [69060 69562]) ("nxml-backward-single-paragraph" function nil nil [69564 70804]) ("nxml-token-contains-data-p" function (:arguments ("&optional" "start" "end")) nil [70806 71350]) ("nxml-paragraph-end-pos" function (:arguments ("had-data" "offset")) nil [71352 73188]) ("nxml-paragraph-start-pos" function (:arguments ("had-data" "offset")) nil [73190 75301]) ("nxml-token-ends-line-p" function nil nil [75303 75359]) ("nxml-token-begins-line-p" function nil nil [75361 75487]) ("nxml-in-mixed-content-p" function (:arguments ("endp")) nil [75489 76747]) ("nxml-preceding-sibling-data-p" function nil nil [76749 77576]) ("nxml-following-sibling-data-p" function nil nil [77578 78083]) ("nxml-do-fill-paragraph" function (:arguments ("arg")) nil [78098 78690]) ("nxml-newline-and-indent" function (:arguments ("soft")) nil [78696 78832]) ("nxml-dynamic-markup-prev-pos" variable nil nil [78855 78896]) ("nxml-dynamic-markup-prev-lengths" variable nil nil [78897 78942]) ("nxml-dynamic-markup-prev-found-marker" variable nil nil [78943 78993]) ("nxml-dynamic-markup-prev-start-tags" variable (:default-value (make-hash-table :test (quote equal))) nil [78994 79069]) ("nxml-dynamic-markup-word" function (:user-visible-flag t) nil [79071 81759]) ("nxml-try-copy-markup" function (:arguments ("word-end-pos")) nil [81761 83404]) ("nxml-char-name-ignore-case" variable nil nil [83438 83477]) ("nxml-char-name-alist" variable nil nil [83479 84089]) ("nxml-char-name-table" variable (:default-value (make-hash-table :test (quote eq))) nil [84091 84387]) ("nxml-autoload-char-name-set-list" variable nil nil [84389 84484]) ("nxml-enable-char-name-set" function (:arguments ("nameset")) nil [84486 84579]) ("nxml-disable-char-name-set" function (:arguments ("nameset")) nil [84581 84677]) ("nxml-char-name-set-enabled-p" function (:arguments ("nameset")) nil [84679 84769]) ("nxml-autoload-char-name-set" function (:arguments ("nameset" "file")) nil [84771 85021]) ("nxml-define-char-name-set" function (:arguments ("nameset" "alist")) nil [85023 85860]) ("nxml-get-char-name" function (:arguments ("code")) nil [85862 86183]) ("nxml-named-char-history" variable nil nil [86185 86221]) ("nxml-insert-named-char" function (:user-visible-flag t :arguments ("arg")) nil [86223 87236]) ("nxml-maybe-load-char-name-set" function (:arguments ("sym")) nil [87240 87483]) ("nxml-toggle-char-ref-extra-display" function (:user-visible-flag t :arguments ("arg")) nil [87485 88090]) ("put" code nil nil [88092 88125]) ("nxml-char-ref-display-extra" function (:arguments ("start" "end" "n")) nil [88127 88675]) ("nxml-clear-char-ref-extra-display" function (:arguments ("start" "end")) nil [88677 88902]) ("nxml-version" function (:user-visible-flag t) nil [88920 89127]) ("nxml-start-delimiter-length" function (:arguments ("type")) nil [89130 89227]) ("put" code nil nil [89232 89283]) ("put" code nil nil [89284 89329]) ("put" code nil nil [89330 89390]) ("put" code nil nil [89391 89438]) ("put" code nil nil [89439 89490]) ("put" code nil nil [89491 89550]) ("put" code nil nil [89551 89599]) ("put" code nil nil [89600 89646]) ("nxml-end-delimiter-length" function (:arguments ("type")) nil [89648 89741]) ("put" code nil nil [89746 89795]) ("put" code nil nil [89796 89839]) ("put" code nil nil [89840 89898]) ("put" code nil nil [89899 89944]) ("put" code nil nil [89945 89994]) ("put" code nil nil [89995 90052]) ("put" code nil nil [90053 90099]) ("put" code nil nil [90100 90144]) ("nxml-token-type-friendly-name" function (:arguments ("type")) nil [90146 90253]) ("put" code nil nil [90255 90311]) ("put" code nil nil [90312 90386]) ("put" code nil nil [90387 90443]) ("put" code nil nil [90444 90501]) ("nxml-mode" package nil nil [90503 90523]))
    :file "nxml-mode.el"
    :pointmax 90552
    :unmatched-syntax 'nil
    )
   (semanticdb-table "rng-nxml.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("easymenu" include nil nil [916 935]) ("xmltok" include nil nil [936 953]) ("nxml-util" include nil nil [954 974]) ("nxml-ns" include nil nil [975 993]) ("rng-match" include nil nil [994 1014]) ("rng-util" include nil nil [1015 1034]) ("rng-valid" include nil nil [1035 1055]) ("nxml-mode" include nil nil [1056 1076]) ("rng-loc" include nil nil [1077 1095]) ("rng-nxml-auto-validate-flag" variable (:user-visible-flag t :default-value t) nil [1097 1242]) ("rng-preferred-prefix-alist-default" variable nil nil [1244 1352]) ("rng-preferred-prefix-alist" variable (:user-visible-flag t :default-value rng-preferred-prefix-alist-default) nil [1354 1616]) ("rng-complete-end-tags-after-<" variable (:user-visible-flag t :default-value t) nil [1618 1764]) ("rng-nxml-easy-menu" variable (:default-value (quote ("XML" ["Show Outline Only" nxml-hide-all-text-content] ["Show Everything" nxml-show-all] "---" ["Validation" rng-validate-mode :style toggle :selected rng-validate-mode] "---" ("Set Schema" ["Automatically" rng-auto-set-schema] ("For Document Type" :filter (lambda (menu) (mapcar (lambda (type-id) (vector type-id (list (quote rng-set-document-type) type-id))) (rng-possible-type-ids)))) ["Any Well-Formed XML" rng-set-vacuous-schema] ["File..." rng-set-schema-file]) ["Show Schema Location" rng-what-schema] ["Save Schema Location" rng-save-schema-location :help "Save the location of the schema currently being used for this buffer"] "---" ["First Error" rng-first-error :active rng-validate-mode] ["Next Error" rng-next-error :active rng-validate-mode] "---" ["Customize nXML" (customize-group (quote nxml))] "---" ["Show nXML Version" nxml-version]))) nil [1766 2759]) ("rng-nxml-mode-init" function (:user-visible-flag t) nil [2776 4048]) ("rng-tag-history" variable nil nil [4050 4078]) ("rng-attribute-name-history" variable nil nil [4079 4118]) ("rng-attribute-value-history" variable nil nil [4119 4159]) ("rng-complete-target-names" variable nil nil [4161 4199]) ("rng-complete-name-attribute-flag" variable nil nil [4200 4245]) ("rng-complete-extra-strings" variable nil nil [4246 4285]) ("rng-complete" function (:user-visible-flag t) nil [4287 4765]) ("rng-in-start-tag-name-regex" variable (:constant-flag t :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "<\\(?:w\\(?::w?\\)?\\)?\\=" t t)) nil [4767 4907]) ("rng-complete-tag" function (:arguments ("lt-pos")) nil [4909 6403]) ("rng-in-end-tag-name-regex" variable (:constant-flag t :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "</\\(?:w\\(?::w?\\)?\\)?\\=" t t)) nil [6405 6544]) ("rng-complete-end-tag" function (:arguments ("lt-pos")) nil [6546 7686]) ("rng-in-attribute-regex" variable (:constant-flag t :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "<w\\(?::w\\)?\\(?:[ 	
]+w\\(?::w\\)?[ 	
]*=[ 	
]*\\(?:\"[^\"]*\"\\|'[^']*'\\)\\)*[ 	
]+\\(\\(?:w\\(?::w?\\)?\\)?\\)\\=" t t)) nil [7688 7937]) ("rng-undeclared-prefixes" variable nil nil [7939 7975]) ("rng-complete-attribute-name" function (:arguments ("lt-pos")) nil [7977 8704]) ("rng-in-attribute-value-regex" variable (:constant-flag t :default-value (replace-regexp-in-string "w" xmltok-ncname-regexp "<w\\(?::w\\)?\\(?:[ 	
]+w\\(?::w\\)?[ 	
]*=[ 	
]*\\(?:\"[^\"]*\"\\|'[^']*'\\)\\)*[ 	
]+\\(w\\(:w\\)?\\)[ 	
]*=[ 	
]*\\(\"[^\"]*\\|'[^']*\\)\\=" t t)) nil [8706 8995]) ("rng-complete-attribute-value" function (:arguments ("lt-pos")) nil [8997 10035]) ("rng-possible-namespace-uris" function (:arguments ("prefix")) nil [10037 10372]) ("rng-qname-regexp" variable (:constant-flag t :default-value (concat "\\`" xmltok-ncname-regexp "\\(?:" ":" xmltok-ncname-regexp "\\)" "?" "\\'")) nil [10374 10494]) ("rng-qname-p" function (:arguments ("string")) nil [10496 10573]) ("rng-expand-qname" function (:arguments ("qname" "&optional" "defaultp" "recover-fun")) nil [10575 10921]) ("rng-start-tag-expand-recover" function (:arguments ("prefix" "local-name")) nil [10923 11079]) ("rng-split-qname" function (:arguments ("qname")) nil [11081 11255]) ("rng-in-mixed-content-p" function nil nil [11257 11535]) ("rng-set-state-after" function (:arguments ("&optional" "pos")) nil [11537 13427]) ("rng-adjust-state-for-attribute" function (:arguments ("lt-pos" "start")) nil [13429 14055]) ("rng-find-undeclared-prefixes" function nil nil [14058 15118]) ("rng-prune-attribute-at" function (:arguments ("start" "atts")) nil [15120 15367]) ("rng-adjust-state-for-attribute-value" function (:arguments ("name-start" "colon" "name-end")) nil [15369 15809]) ("rng-complete-qname-function" function (:arguments ("string" "predicate" "flag")) nil [15811 16157]) ("rng-generate-qname-list" function (:arguments ("&optional" "string")) nil [16159 17921]) ("rng-get-preferred-unused-prefix" function (:arguments ("ns")) nil [17924 18443]) ("rng-strings-to-completion-alist" function (:arguments ("strings")) nil [18445 18613]) ("rng-nxml" package nil nil [18615 18634]))
    :file "rng-nxml.el"
    :pointmax 18662
    )
   (semanticdb-table "rng-loc.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("nxml-util" include nil nil [904 924]) ("nxml-parse" include nil nil [925 946]) ("rng-parse" include nil nil [947 967]) ("rng-uri" include nil nil [968 986]) ("rng-util" include nil nil [987 1006]) ("xmltok" include nil nil [1007 1024]) ("rng-current-schema-file-name" variable nil nil [1026 1152]) ("make-variable-buffer-local" code nil nil [1153 1211]) ("rng-schema-locating-files-default" variable nil nil [1213 1319]) ("rng-schema-locating-file-schema-file" variable nil nil [1321 1424]) ("rng-schema-locating-file-schema" variable nil nil [1426 1533]) ("rng-schema-locating-files" variable (:user-visible-flag t :default-value rng-schema-locating-files-default) nil [1535 1684]) ("rng-schema-loader-alist" variable nil nil [1686 1781]) ("rng-cached-document-element" variable nil nil [1783 1823]) ("rng-document-type-history" variable nil nil [1825 1863]) ("rng-set-document-type" function (:arguments ("type-id")) nil [1865 2320]) ("rng-read-type-id" function nil nil [2322 2670]) ("rng-set-schema-file" function (:user-visible-flag t :arguments ("filename")) nil [2672 3393]) ("rng-set-vacuous-schema" function (:user-visible-flag t) nil [3395 3566]) ("rng-set-schema-file-1" function (:arguments ("filename")) nil [3568 3848]) ("rng-load-schema" function (:arguments ("filename")) nil [3852 4206]) ("rng-what-schema" function (:user-visible-flag t) nil [4208 4489]) ("rng-auto-set-schema" function (:user-visible-flag t :arguments ("&optional" "no-display-error")) nil [4491 4949]) ("rng-locate-schema-file" function (:arguments ("&optional" "type-id")) nil [4951 5818]) ("rng-possible-type-ids" function nil nil [5820 6119]) ("rng-locate-schema-file-using" function (:arguments ("files")) nil [6121 7710]) ("put" code nil nil [7712 7785]) ("put" code nil nil [7786 7846]) ("put" code nil nil [7847 7895]) ("put" code nil nil [7896 7963]) ("put" code nil nil [7964 8020]) ("rng-match-document-element-rule" function (:arguments ("props")) nil [8022 8464]) ("rng-match-namespace-rule" function (:arguments ("props")) nil [8466 8751]) ("rng-document-element" function nil nil [8753 9390]) ("rng-get-start-tag-namespace" function nil nil [9392 9994]) ("rng-match-transform-uri-rule" function (:arguments ("props")) nil [9996 10655]) ("rng-match-uri-rule" function (:arguments ("props")) nil [10657 11233]) ("rng-file-name-matches-uri-pattern-p" function (:arguments ("file-name" "pattern")) nil [11235 11496]) ("rng-match-default-rule" function (:arguments ("props")) nil [11498 11679]) ("rng-possible-type-ids-using" function (:arguments ("file" "type-ids")) nil [11681 12312]) ("rng-locate-schema-file-from-type-id" function (:arguments ("type-id" "file")) nil [12314 13113]) ("rng-schema-locating-file-alist" variable nil nil [13115 13158]) ("rng-get-parsed-schema-locating-file" function (:arguments ("file")) nil [13160 13882]) ("rng-locate-namespace-uri" variable (:constant-flag t :default-value (nxml-make-namespace "http://thaiopensource.com/ns/locating-rules/1.0")) nil [13886 13995]) ("rng-parse-schema-locating-file" function (:arguments ("file")) nil [13997 15584]) ("rng-save-schema-location" function (:user-visible-flag t) nil [15586 15951]) ("rng-save-schema-location-1" function (:arguments ("prompt" "&optional" "type-id")) nil [15953 17963]) ("rng-loc" package nil nil [17965 17983]))
    :file "rng-loc.el"
    :pointmax 18010
    :unmatched-syntax 'nil
    )
   (semanticdb-table "nxml-rap.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("xmltok" include nil nil [4418 4435]) ("nxml-util" include nil nil [4436 4456]) ("nxml-prolog-end" variable nil nil [4458 4543]) ("make-variable-buffer-local" code nil nil [4544 4589]) ("nxml-scan-end" variable nil nil [4591 5396]) ("make-variable-buffer-local" code nil nil [5397 5440]) ("nxml-get-inside" function (:arguments ("pos")) nil [5442 5513]) ("nxml-clear-inside" function (:arguments ("start" "end")) nil [5515 5611]) ("nxml-set-inside" function (:arguments ("start" "end" "type")) nil [5613 5706]) ("nxml-inside-end" function (:arguments ("pos")) nil [5708 5953]) ("nxml-inside-start" function (:arguments ("pos")) nil [5955 6213]) ("nxml-scan-after-change" function (:arguments ("start" "end")) nil [6238 7678]) ("nxml-scan-prolog" function nil nil [7680 8130]) ("nxml-adjust-start-for-dependent-regions" function (:arguments ("start" "end" "pre-change-length")) nil [8156 8830]) ("nxml-mark-parse-dependent-regions" function nil nil [8836 9066]) ("nxml-mark-parse-dependent-region" function (:arguments ("fun" "start" "end" "&rest" "args")) nil [9068 9296]) ("put" code nil nil [9298 9332]) ("nxml-clear-dependent-regions" function (:arguments ("start" "end")) nil [9334 9686]) ("nxml-token-after" function nil nil [9715 10776]) ("nxml-token-before" function nil nil [10778 11092]) ("nxml-tokenize-forward" function nil nil [11094 11583]) ("nxml-move-outside-backwards" function nil nil [11585 11999]) ("nxml-ensure-scan-up-to-date" function nil nil [12001 12674]) ("nxml-scan-element-forward" function (:arguments ("from" "&optional" "up")) nil [12698 14430]) ("nxml-scan-element-backward" function (:arguments ("from" "&optional" "up" "bound")) nil [14432 16635]) ("nxml-scan-error" function (:arguments ("&rest" "args")) nil [16637 16706]) ("put" code nil nil [16708 16794]) ("put" code nil nil [16796 16887]) ("nxml-rap" package nil nil [16889 16908]))
    :file "nxml-rap.el"
    :pointmax 16936
    )
   (semanticdb-table "nxml-outln.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("xmltok" include nil nil [3389 3406]) ("nxml-util" include nil nil [3407 3427]) ("nxml-rap" include nil nil [3428 3447]) ("nxml-section-element-name-regexp" variable (:user-visible-flag t :default-value "article\\|\\(sub\\)*section\\|chapter\\|div\\|appendix\\|part\\|preface\\|reference\\|simplesect\\|bibliography\\|bibliodiv\\|glossary\\|glossdiv") nil [3449 4096]) ("nxml-heading-element-name-regexp" variable (:user-visible-flag t :default-value "title\\|head") nil [4098 4466]) ("nxml-outline-child-indent" variable (:user-visible-flag t :default-value 2) nil [4468 4616]) ("nxml-heading-face" variable (:default-value (quote ((t (:weight bold))))) nil [4618 4767]) ("nxml-outline-indicator-face" variable (:default-value (quote ((t (:inherit default))))) nil [4769 4931]) ("nxml-outline-active-indicator-face" variable (:default-value (quote ((t (:box t :inherit nxml-outline-indicator-face))))) nil [4933 5139]) ("nxml-outline-ellipsis-face" variable (:default-value (quote ((t (:bold t :inherit default))))) nil [5141 5284]) ("nxml-heading-scan-distance" variable (:default-value 1000) nil [5286 5381]) ("nxml-outline-prefix-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote nxml-show-all)) (define-key map "" (quote nxml-hide-all-text-content)) (define-key map "" (quote nxml-refresh-outline)) (define-key map "" (quote nxml-hide-direct-text-content)) (define-key map "" (quote nxml-show-direct-text-content)) (define-key map "" (quote nxml-hide-subheadings)) (define-key map "" (quote nxml-show)) (define-key map "" (quote nxml-show-subheadings)) (define-key map "" (quote nxml-hide-text-content)) (define-key map "	" (quote nxml-show-direct-subheadings)) (define-key map "" (quote nxml-hide-other)) map)) nil [5383 6023]) ("nxml-show-all" function (:user-visible-flag t) nil [6063 6347]) ("nxml-hide-all-text-content" function (:user-visible-flag t) nil [6349 6763]) ("nxml-show-direct-text-content" function (:user-visible-flag t) nil [6765 7388]) ("nxml-show-direct-subheadings" function (:user-visible-flag t) nil [7390 7955]) ("nxml-hide-direct-text-content" function (:user-visible-flag t) nil [7957 8619]) ("nxml-hide-subheadings" function (:user-visible-flag t) nil [8621 9333]) ("nxml-show" function (:user-visible-flag t) nil [9335 9822]) ("nxml-hide-text-content" function (:user-visible-flag t) nil [9824 10234]) ("nxml-show-subheadings" function (:user-visible-flag t) nil [10236 10739]) ("nxml-hide-other" function (:user-visible-flag t) nil [10741 11897]) ("nxml-outline-state-transform-exceptions" variable nil nil [12024 12076]) ("nxml-target-section-pos" variable nil nil [12077 12113]) ("nxml-depth-in-target-section" variable nil nil [12114 12155]) ("nxml-outline-state-transform-alist" variable nil nil [12156 12203]) ("nxml-transform-buffer-outline" function (:arguments ("alist")) nil [12205 12514]) ("nxml-transform-subtree-outline" function (:arguments ("alist")) nil [12516 12854]) ("nxml-outline-pre-adjust-point" function nil nil [12856 14030]) ("nxml-outline-adjust-point" function nil nil [14032 14380]) ("nxml-transform-outline-state" function (:arguments ("section-start-pos")) nil [14382 14668]) ("nxml-section-tag-transform-outline-state" function (:arguments ("startp" "section-start-pos" "&optional" "heading-start-pos")) nil [14672 15374]) ("nxml-get-outline-state" function (:arguments ("pos")) nil [15376 15458]) ("nxml-set-outline-state" function (:arguments ("pos" "state")) nil [15460 15695]) ("nxml-mouse-show-direct-text-content" function (:user-visible-flag t :arguments ("event")) nil [15718 15938]) ("nxml-mouse-hide-direct-text-content" function (:user-visible-flag t :arguments ("event")) nil [15940 16160]) ("nxml-mouse-hide-subheadings" function (:user-visible-flag t :arguments ("event")) nil [16162 16358]) ("nxml-mouse-show-direct-subheadings" function (:user-visible-flag t :arguments ("event")) nil [16360 16577]) ("nxml-mouse-set-point" function (:arguments ("event")) nil [16579 16667]) ("nxml-refresh-outline" function (:user-visible-flag t) nil [16681 17121]) ("nxml-outline-display-section-tag-function" variable nil nil [17123 17177]) ("nxml-outline-display-rest" function (:arguments ("outline-state" "start-tag-indent" "tag-qnames")) nil [17179 19980]) ("nxml-highlighted-less-than" variable (:constant-flag t :default-value (propertize "<" (quote face) (quote nxml-tag-delimiter-face))) nil [19982 20069]) ("nxml-highlighted-greater-than" variable (:constant-flag t :default-value (propertize ">" (quote face) (quote nxml-tag-delimiter-face))) nil [20071 20161]) ("nxml-highlighted-colon" variable (:constant-flag t :default-value (propertize ":" (quote face) (quote nxml-element-colon-face))) nil [20163 20246]) ("nxml-highlighted-slash" variable (:constant-flag t :default-value (propertize "/" (quote face) (quote nxml-tag-slash-face))) nil [20248 20327]) ("nxml-highlighted-ellipsis" variable (:constant-flag t :default-value (propertize "..." (quote face) (quote nxml-outline-ellipsis-face))) nil [20329 20420]) ("nxml-highlighted-empty-end-tag" variable (:constant-flag t :default-value (concat nxml-highlighted-ellipsis nxml-highlighted-less-than nxml-highlighted-slash nxml-highlighted-greater-than)) nil [20422 20589]) ("nxml-highlighted-inactive-minus" variable (:constant-flag t :default-value (propertize "-" (quote face) (quote nxml-outline-indicator-face))) nil [20591 20687]) ("nxml-highlighted-active-minus" variable (:constant-flag t :default-value (propertize "-" (quote face) (quote nxml-outline-active-indicator-face))) nil [20689 20790]) ("nxml-highlighted-active-plus" variable (:constant-flag t :default-value (propertize "+" (quote face) (quote nxml-outline-active-indicator-face))) nil [20792 20892]) ("nxml-display-section" function (:arguments ("last-pos" "section-start-pos" "heading-start-pos" "parent-indent" "parent-outline-state" "had-children" "tag-qnames")) nil [20894 23751]) ("nxml-highlighted-qname" function (:arguments ("qname")) nil [23753 24132]) ("nxml-outline-display-single-line-end-tag" function (:arguments ("last-pos")) nil [24134 24472]) ("nxml-outline-display-multi-line-end-tag" function (:arguments ("last-pos" "start-tag-indent")) nil [24478 25444]) ("nxml-outline-show-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote nxml-show-direct-text-content)) (define-key map [mouse-2] (quote nxml-mouse-show-direct-text-content)) map)) nil [25446 25648]) ("nxml-outline-show-help" variable (:default-value "mouse-2: show") nil [25650 25697]) ("put" code nil nil [25699 25755]) ("put" code nil nil [25756 25801]) ("put" code nil nil [25802 25864]) ("put" code nil nil [25865 25931]) ("put" code nil nil [25933 25989]) ("put" code nil nil [25990 26035]) ("put" code nil nil [26036 26081]) ("put" code nil nil [26082 26144]) ("put" code nil nil [26145 26211]) ("put" code nil nil [26213 26273]) ("put" code nil nil [26274 26323]) ("put" code nil nil [26324 26390]) ("put" code nil nil [26391 26461]) ("put" code nil nil [26462 26539]) ("put" code nil nil [26541 26606]) ("put" code nil nil [26607 26676]) ("put" code nil nil [26677 26736]) ("put" code nil nil [26737 26785]) ("put" code nil nil [26786 26846]) ("nxml-outline-hiding-tag-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-1] (quote nxml-mouse-show-direct-subheadings)) (define-key map [mouse-2] (quote nxml-mouse-show-direct-text-content)) (define-key map "" (quote nxml-show-direct-text-content)) map)) nil [26848 27123]) ("nxml-outline-hiding-tag-help" variable (:default-value "mouse-1: show subheadings, mouse-2: show text content") nil [27125 27220]) ("put" code nil nil [27222 27284]) ("put" code nil nil [27285 27336]) ("put" code nil nil [27337 27411]) ("put" code nil nil [27412 27490]) ("nxml-outline-showing-tag-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-1] (quote nxml-mouse-hide-subheadings)) (define-key map [mouse-2] (quote nxml-mouse-show-direct-text-content)) (define-key map "" (quote nxml-show-direct-text-content)) map)) nil [27492 27761]) ("nxml-outline-showing-tag-help" variable (:default-value "mouse-1: hide subheadings, mouse-2: show text content") nil [27763 27859]) ("put" code nil nil [27861 27924]) ("put" code nil nil [27925 27977]) ("put" code nil nil [27978 28054]) ("put" code nil nil [28055 28145]) ("nxml-outline-set-overlay" function (:arguments ("category" "start" "end" "&optional" "front-advance" "rear-advance")) nil [28147 29117]) ("nxml-end-of-heading" function nil nil [29119 29622]) ("nxml-token-start-tag-p" function nil nil [29658 29771]) ("nxml-token-end-tag-p" function nil nil [29773 29880]) ("nxml-token-starts-line-p" function nil nil [29882 30008]) ("nxml-cached-section-tag-regexp" variable nil nil [30010 30053]) ("nxml-cached-section-element-name-regexp" variable nil nil [30054 30106]) ("nxml-make-section-tag-regexp" function nil nil [30108 30312]) ("nxml-make-section-tag-regexp-1" function nil nil [30314 30673]) ("nxml-section-tag-forward" function nil nil [30675 31626]) ("nxml-section-tag-backward" function nil nil [31630 32798]) ("nxml-section-start-position" function nil nil [32800 33167]) ("nxml-back-to-section-start" function (:arguments ("&optional" "invisible-ok")) nil [33169 34356]) ("nxml-after-section-start-tag" function nil nil [34358 34818]) ("nxml-heading-start-position" function nil nil [34820 36074]) ("nxml-report-outline-error" function (:arguments ("msg" "err")) nil [36096 36179]) ("nxml-outline-error" function (:arguments ("&rest" "args")) nil [36181 36256]) ("put" code nil nil [36258 36350]) ("put" code nil nil [36352 36460]) ("nxml-debug-overlays" function nil nil [36477 36912]) ("nxml-outln" package nil nil [36914 36935]))
    :file "nxml-outln.el"
    :pointmax 36965
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
