default namespace x = "http://www.w3.org/2002/06/html2"
namespace gxp = "http://google.com/2001/gxp"
namespace call = "http://google.com/2001/gxp/templates"
datatypes xs = "http://www.w3.org/2001/XMLSchema-datatypes"

gxpstart = gxp
include "xhtml.rnc" inherit = x

gxp =
grammar {
   start = template-element

   template-element = element gxp:template {
      attribute name {java-class-name},
      import-element *,
      throws-element *,
      param-element *,
      gxp-statement-top ?
   }

   gxp-statement-top =
      gxp-statement
    | attr-element

   gxp-statement =
      if-element
    | loop-element
    | abbr-element
    | call-element
    | eval-element

   param-element = element gxp:param {
      attribute name {text},
      attribute type {java-class-name},
      empty
   }

   import-element = element gxp:import {
      (attribute package {java-class-name}
       | attribute class {java-class-name}),
      empty
   }

   throws-element = element gxp:throws {
      attribute exception {java-class-name},
      empty
   }

   expression = (text & eval-element) *

   if-element = element gxp:if {
      attribute cond {java-expr},
      (gxp-statement & else-element)
   }

   else-element = element gxp:else {
      empty
   }

   loop-element = element gxp:loop {
      attribute var {var-name},
      attribute type {java-class-name},
      attribute iterator {java-expr},
      gxp-statement
   }

   attr-element = element gxp:attr {
      attribute name {var-name},
      expression
   }

   abbr-element = element gxp:abbr {
      attribute type {java-class-name},
      attribute name {var-name},
      attribute expr {java-expr},
      gxp-statement
   }

   call-element = element call:* {
      attribute * {java-expr} *,
      (attr-element | empty)
   }

   eval-element = element gxp:eval {
      attribute eval {java-expr},
      empty
   }

   java-class-name = xs:string {
      pattern = "[a-zA-Z][a-zA-Z0-9]*([a-zA-Z][a-zA-Z0-9]*.)*[a-zA-Z0-9]"
   }

   java-expr = xs:string

   var-name = xs:string {pattern = "[a-zA-Z][a-zA-Z0-9]*"}
}
